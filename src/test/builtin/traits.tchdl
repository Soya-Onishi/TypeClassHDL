package std::traits

import std::types:::Ordering

trait Add {
  def add(that: This) -> This
}

impl Add for Int {
  def add(that: Int) -> Int { this + that }
}

impl[m: Num] Add for Bit[m]
  where m: min 1
{
  def add(that: Bit[m]) -> Bit[m] { this + that }
}

trait Sub {
  def sub(that: This) -> This
}

impl Sub for Int {
  def sub(that: Int) -> Int { this - that }
}

impl[m: Num] Sub for Bit[m]
  where m: min 1
{
  def sub(that: Bit[m]) -> Bit[m] { this - that }
}

trait Mul {
  def mul(that: This) -> This
}

impl Mul for Int {
  def mul(that: Int) -> Int { this * that }
}

impl[m: Num] Mul for Bit[m]
  where m: min 1
{
  def mul(that: Bit[m]) -> Bit[m] { this * that }
}

trait Div {
  def div(that: This) -> This
}

impl Div for Int {
  def div(that: Int) -> Int { this / that }
}

impl[m: Num] Div for Bit[m]
  where m: min 1
{
  def div(that: Bit[m]) -> Bit[m] { this / that }
}

trait Shl {
  def shl(shamt: Int) -> This
}

impl Shl for Int {
  def shl(shamt: Int) -> Int {
    this << shamt
  }
}

impl[m: Num] Shl for Bit[m] where m: min 1 {
  def shl(shamt: Int) -> Bit[m] {
    this << shamt
  }
}

trait Shr {
  def shr(shamt: Int) -> This
}

impl Shr for Int {
  def shr(shamt: Int) -> Int {
    this >> shamt
  }
}

impl[m: Num] Shr for Bit[m] where m: min 1 {
  def shr(shamt: Int) -> Bit[m] {
    this >> shamt
  }
}

trait DynShl {
  def dynShl[m: Num](shamt: Bit[m]) -> This where m: max 20 & min 1
}

impl DynShl for Int {
  def dynShl[m: Num](shamt: Bit[m]) -> Int
    where m: max 20 & min 1
  {
    this <<< shamt
  }
}

impl[m: Num] DynShl for Bit[m]
  where m: min 1
{
  def dynShl[n: Num](shamt: Bit[n]) -> Bit[m]
    where n: max 20 & min 1
  {
    this <<< shamt
  }
}

trait DynShr {
  def dynShr[m: Num](shamt: Bit[m]) -> This where m: min 1
}

impl DynShr for Int {
  def dynShr[m: Num](shamt: Bit[m]) -> Int
    where m: min 1
  {
    this >>> shamt
  }
}

impl[m: Num] DynShr for Bit[m]
  where m: min 1
{
  def dynShr[n: Num](shamt: Bit[n]) -> Bit[m]
    where n: min 1
  {
    this >>> shamt
  }
}

trait Eq {
  def equals(that: This) -> Bool
}

impl Eq for Int {
  def equals(that: Int) -> Bool { this == that }
}

impl Eq for Bool {
  def equals(that: Bool) -> Bool { this == that }
}

impl[m: Num] Eq for Bit[m]
  where m: min 1
{
  def equals(that: Bit[m]) -> Bool { this == that }
}

trait Ord {
  def cmp(that: This) -> Ordering
}

impl Ord for Int {
  def cmp(that: Int) -> Ordering {
    if(this == that)     Ordering:::Eq
    else if(this < that) Ordering:::Lt
    else                 Ordering:::Gt
  }
}

impl[m: Num] Ord for Bit[m]
  where m: min 1
{
  def cmp(that: Bit[m]) -> Ordering {
    if(this == that)     Ordering:::Eq
    else if(this < that) Ordering:::Lt
    else                 Ordering:::Gt
  }
}

trait Not {
  def not() -> This
}

impl Not for Int {
  def not() -> Int { !this }
}

impl Not for Bool {
  def not() -> Bool { !this }
}

impl[m: Num] Not for Bit[m]
  where m: min 1
{
  def not() -> Bit[m] { !this }
}

trait Neg {
  def neg() -> This
}

impl Neg for Int {
  def neg() -> Int { -this }
}

impl[m: Num] Neg for Bit[m]
  where m: min 1
{
  def neg() -> Bit[m] { -this }
}

trait From[T] {
  static def from(n: T) -> This
}

impl[m: Num] From[Int] for Bit[m]
  where m: min 1
{
  @built_in[fromIntBit: (Int) => Bit]
  static def from(n: Int) -> Bit[m] {
    Bit[m]:::from(n)
  }
}

impl[m: Num] From[Bool] for Bit[m]
  where m: min 1
{
  @built_in[fromBoolBit: (Bool) => Bit]
  static def from(n: Bool) -> Bit[m] {
    Bit[m]:::from(n)
  }
}

impl[x: Num, y: Num] From[Bit[y]] for Bit[x]
  where x: min 1,
        y: min 1
{
  @built_in[fromBitBit: (Bit) => Bit]
  static def from(n: Bit[y]) -> Bit[x] {
    Bit[x]:::from(n)
  }
}


trait HW {}